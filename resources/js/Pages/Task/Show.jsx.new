import { TASK_STATUS_CLASS_MAP, TASK_STATUS_TEXT_MAP, INTERVENTION_STATUS_CLASS_MAP, INTERVENTION_STATUS_TEXT_MAP } from '@/constants.jsx';
import AuthenticatedLayout from "@/Layouts/AuthenticatedLayout";
import { Head, Link, usePage, router } from '@inertiajs/react';
import { TASK_PRIORITY_CLASS_MAP, TASK_PRIORITY_TEXT_MAP } from '@/constants.jsx';
import { useForm } from '@inertiajs/react';
import InputLabel from '@/Components/InputLabel';
import { useState } from 'react';
import { 
  UserIcon,
  CalendarIcon,
  ClipboardDocumentListIcon,
  TagIcon,
  FlagIcon,
  PencilSquareIcon,
  EyeIcon,
  PhotoIcon,
  ClockIcon,
  UserGroupIcon,
  MagnifyingGlassIcon,
  XMarkIcon,
  ArrowsPointingOutIcon,
  ChevronUpIcon,
  ChevronDownIcon
} from "@heroicons/react/24/outline";

export default function Show({ auth, task }) {
  const [isImageModalOpen, setIsImageModalOpen] = useState(false);
  const [zoomLevel, setZoomLevel] = useState(1);
  const [collapsedSections, setCollapsedSections] = useState({});
  const isAssignedUser = auth.user.id === task.assigned_user_id;
  const isTaskCreator = auth.user.id === task.created_by;

  const handleZoomIn = (e) => {
    e.stopPropagation();
    setZoomLevel(prev => Math.min(prev + 0.25, 3));
  };

  const handleZoomOut = (e) => {
    e.stopPropagation();
    setZoomLevel(prev => Math.max(prev - 0.25, 0.5));
  };

  const handleCloseModal = () => {
    setIsImageModalOpen(false);
    setZoomLevel(1); // Reset zoom when closing
  };

  // ... rest of the existing code ...

  return (
    <>
      <Head title={`Ticket "${task.name}"`} />

      {/* Image Modal/Lightbox */}
      {isImageModalOpen && task.image_path && (
        <div 
          className="fixed inset-0 bg-black/90 z-50 flex flex-col items-center justify-center p-4 animate-fade-in"
          onClick={handleCloseModal}
        >
          {/* Image container */}
          <div className="relative w-full max-w-7xl mx-auto overflow-auto mb-16">
            <div className="relative rounded-xl overflow-hidden shadow-2xl transform transition-transform duration-300"
                 style={{ 
                   transform: `scale(${zoomLevel})`,
                   transition: 'transform 0.3s ease-out'
                 }}>
              <img
                src={task.image_path}
                alt="Preuve du problÃ¨me"
                className="w-full h-auto max-h-[85vh] object-contain"
                onClick={(e) => e.stopPropagation()}
                style={{ 
                  transformOrigin: 'center center',
                }}
              />
            </div>
          </div>

          {/* Bottom controls bar */}
          <div className="fixed bottom-8 left-1/2 -translate-x-1/2 z-20 flex items-center gap-4 bg-black/40 backdrop-blur-sm p-3 rounded-2xl border border-white/10 shadow-xl">
            {/* Zoom controls */}
            <div className="flex items-center gap-2">
              <button
                onClick={handleZoomOut}
                className="text-white hover:text-cyan-400 transition-colors duration-300 p-2 hover:bg-white/10 rounded-lg"
                title="Zoom out"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 12H4" />
                </svg>
              </button>
              <span className="text-white/80 min-w-[4rem] text-center font-medium">{Math.round(zoomLevel * 100)}%</span>
              <button
                onClick={handleZoomIn}
                className="text-white hover:text-cyan-400 transition-colors duration-300 p-2 hover:bg-white/10 rounded-lg"
                title="Zoom in"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                </svg>
              </button>
            </div>

            {/* Separator */}
            <div className="w-px h-8 bg-white/10"></div>

            {/* Close button */}
            <button
              onClick={(e) => {
                e.stopPropagation();
                handleCloseModal();
              }}
              className="bg-gradient-to-r from-red-500 to-red-600 text-white h-10 px-4 rounded-lg flex items-center gap-2 transform transition-all duration-300 hover:scale-105 hover:from-red-600 hover:to-red-700 hover:shadow-lg hover:shadow-red-500/50 group relative"
            >
              <XMarkIcon className="w-5 h-5 transform transition-transform duration-300 group-hover:scale-110" />
              <span className="font-medium">Fermer</span>
              <div className="absolute inset-0 rounded-lg bg-red-400/20 animate-ping" />
            </button>
          </div>
        </div>
      )}

      <style jsx>{`
        @keyframes fade-in {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        .animate-fade-in {
          animation: fade-in 0.3s ease-out;
        }
      `}</style>

      {/* Rest of the component ... */}
    </>
  );
} 